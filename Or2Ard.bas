
10 REM Simple transmitter/Receiver of characters over I2C to Arduino and then to PC over USB
12 FOR K=0TO32:POKE#6000+K,0:NEXTK
15 CLS : PRINT "Setting up assembly"
20 GOSUB 5000
30 REM SETUP ZP VARIABLES FOR I2C MODULE
40 DOKE #0,#6000: REM POINTER TO LOCATION OF TX/RX BUFFER
50 POKE 3,1:REM COUNT OF BYTES TO SEND (LOW BYTE) (MAX BUFFER 32 BYTES ON ARDUINO)
60 POKE 4,0:REM COUNT OF BYTES TO SEND (HIGH BYTE) - ALWAYS 0 FOR NOW
70 POKE 5,0:REM SEND OR RECEIVE (0=SEND, 1=RECEIVE)
80 POKE 7,#4:REM ADDRESS IF I2C SLAVE (SET TO #4 IN ARDUINO CODE -CAN BE CHANGED)
85 POKE 8,#4:REM ADDRESS OF I2C SLAVE FOR READ EVENTS (CAN BE SAME AS IN #7 OR DIFFERENT DEPENDING ON DEVICE)
87 POKE 9,1:REM DELAY FLAG BETWEEN SENDING BYTES - 0 = NO DELAY.
88 POKE 10,0:REM REQUIRE A SEND OF #00 BEFORE A READ (0 = NO, 1 = YES)
89 PRINT "PRESS KEYS TO INPUT AND SEND"
90 A$=KEY$
95 IF A$<>"" THEN GOTO 110
96 POKE 5,1 : REM SET I2C TO READ DATA
97 POKE 3,32 : POKE 4,0 : REM RESET BUFFER TO READ 32 BYTES
98 CALL #4000: REM READ 32 BYTES FROM ARDUINO BUFFER
100 FOR K=0 TO 32
105 IF PEEK(#6000+K)=0 OR PEEK(#6000+K)=255 THEN GOTO 108
106 PRINT CHR$(PEEK(#6000+K));
107 POKE #6000+K,0
108 NEXT K
109 GOTO 90
110 POKE #6000,ASC(A$): REM PUT KEY INPUT INTO BUFFER
120 PRINT A$; : REM ECHO TO ORIC SCREEN
130 IF ASC(A$)=13 THEN PRINT : REM CHECK FOR CR
140 POKE 3,1:POKE 4,0: REM RESET BUFFER COUNTERS TO 1 (LOW) AND  0 (HIGH)
145 POKE 5,0: REM RESET R/W FLAG TO WRITE
150 CALL #4000 : REM RUN I2C ROUTINE
160 GOTO 90
500 END
5000 ST=#4000
5010 EN=0
5030 REPEAT
5040 READ A$
5050 EN=EN+1
5060 UNTIL A$="END"
5070 EN=EN-1
5100 RESTORE
5110 FOR I= ST TO ST+EN-1
5120 READ J
5130 POKE I,J
5140 NEXT I
5160 RETURN
5199 END
5200 REM data 
5210 DATA 173,13,3,133,6,169,238,141
5220 DATA 13,3,169,255,141,3,3,141
5230 DATA 1,3,32,210,64,169,0,133
5240 DATA 4,165,5,208,12,32,210,64
5250 DATA 32,71,64,32,151,64,76,62
5260 DATA 64,32,210,64,165,10,240,8
5270 DATA 32,71,64,169,0,32,238,64
5280 DATA 32,110,64,32,186,64,32,210
5290 DATA 64,165,6,141,13,3,96,173
5300 DATA 1,3,9,1,141,1,3,169
5310 DATA 3,141,1,3,169,1,44,1
5320 DATA 3,240,251,169,2,44,1,3
5330 DATA 240,251,32,228,64,165,7,42
5340 DATA 32,238,64,176,101,96,173,1
5350 DATA 3,9,1,141,1,3,169,3
5360 DATA 141,1,3,169,1,44,1,3
5370 DATA 240,251,169,2,44,1,3,240
5380 DATA 251,32,228,64,165,8,42,9
5390 DATA 1,32,238,64,176,60,96,32
5400 DATA 228,64,230,4,160,0,177,0
5410 DATA 32,238,64,176,45,165,9,208
5420 DATA 3,32,120,65,200,208,2,230
5430 DATA 1,198,3,208,233,198,4,208
5440 DATA 229,96,160,0,32,45,65,165
5450 DATA 2,145,0,32,83,65,200,196
5460 DATA 3,208,241,32,102,65,32,210
5470 DATA 64,96,169,0,141,1,3,234
5480 DATA 169,2,141,1,3,234,169,3
5490 DATA 141,1,3,96,141,1,3,234
5500 DATA 169,0,141,1,3,96,133,2
5510 DATA 162,8,169,0,38,2,42,141
5520 DATA 1,3,234,9,2,141,1,3
5530 DATA 169,2,44,1,3,240,251,173
5540 DATA 1,3,41,1,141,1,3,202
5550 DATA 208,224,169,1,141,1,3,169
5560 DATA 3,141,1,3,169,2,44,1
5570 DATA 3,240,251,173,1,3,74,169
5580 DATA 1,141,1,3,96,169,0,133
5590 DATA 2,162,8,169,1,141,1,3
5600 DATA 169,3,141,1,3,169,2,44
5610 DATA 1,3,240,251,173,1,3,106
5620 DATA 38,2,169,1,141,1,3,202
5630 DATA 208,230,96,169,0,141,1,3
5640 DATA 234,169,2,141,1,3,234,169
5650 DATA 0,141,1,3,234,96,169,1
5660 DATA 141,1,3,234,169,3,141,1
5670 DATA 3,234,169,1,141,1,3,96
5680 DATA 72,169,255,56,233,1,208,252
5690 DATA 104,96
9999 DATA "END"

